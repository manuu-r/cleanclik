// Mocks generated by Mockito 5.4.6 from annotations
// in cleanclik/test/unit/leaderboard_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:cleanclik/core/models/database_exceptions.dart' as _i4;
import 'package:cleanclik/core/models/leaderboard_entry.dart' as _i3;
import 'package:cleanclik/core/models/user.dart' as _i9;
import 'package:cleanclik/core/services/leaderboard_database_service.dart'
    as _i6;
import 'package:cleanclik/core/services/user_service.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:shared_preferences/src/shared_preferences_legacy.dart' as _i10;
import 'package:supabase_flutter/supabase_flutter.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSupabaseClient_0 extends _i1.SmartFake
    implements _i2.SupabaseClient {
  _FakeSupabaseClient_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLeaderboardEntry_1 extends _i1.SmartFake
    implements _i3.LeaderboardEntry {
  _FakeLeaderboardEntry_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatabaseResult_2<T> extends _i1.SmartFake
    implements _i4.DatabaseResult<T> {
  _FakeDatabaseResult_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAuthResult_3 extends _i1.SmartFake implements _i5.AuthResult {
  _FakeAuthResult_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LeaderboardDatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLeaderboardDatabaseService extends _i1.Mock
    implements _i6.LeaderboardDatabaseService {
  MockLeaderboardDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(
            Invocation.getter(#tableName),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#tableName),
            ),
          )
          as String);

  @override
  _i2.SupabaseClient get client =>
      (super.noSuchMethod(
            Invocation.getter(#client),
            returnValue: _FakeSupabaseClient_0(
              this,
              Invocation.getter(#client),
            ),
          )
          as _i2.SupabaseClient);

  @override
  _i3.LeaderboardEntry fromDatabaseRow(Map<String, dynamic>? data) =>
      (super.noSuchMethod(
            Invocation.method(#fromDatabaseRow, [data]),
            returnValue: _FakeLeaderboardEntry_1(
              this,
              Invocation.method(#fromDatabaseRow, [data]),
            ),
          )
          as _i3.LeaderboardEntry);

  @override
  Map<String, dynamic> toDatabaseRow(
    _i3.LeaderboardEntry? entity,
    String? userId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#toDatabaseRow, [entity, userId]),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i8.Future<_i4.DatabaseResult<_i3.LeaderboardPage>> getLeaderboardPage({
    int? page = 1,
    int? pageSize = 20,
    String? currentUserId,
    _i3.LeaderboardFilter? filter = _i3.LeaderboardFilter.all,
    _i3.LeaderboardSort? sort = _i3.LeaderboardSort.points,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getLeaderboardPage, [], {
              #page: page,
              #pageSize: pageSize,
              #currentUserId: currentUserId,
              #filter: filter,
              #sort: sort,
            }),
            returnValue:
                _i8.Future<_i4.DatabaseResult<_i3.LeaderboardPage>>.value(
                  _FakeDatabaseResult_2<_i3.LeaderboardPage>(
                    this,
                    Invocation.method(#getLeaderboardPage, [], {
                      #page: page,
                      #pageSize: pageSize,
                      #currentUserId: currentUserId,
                      #filter: filter,
                      #sort: sort,
                    }),
                  ),
                ),
          )
          as _i8.Future<_i4.DatabaseResult<_i3.LeaderboardPage>>);

  @override
  _i8.Future<_i4.DatabaseResult<_i3.LeaderboardPage>> getUserRankContext({
    required String? userId,
    int? contextSize = 5,
    _i3.LeaderboardFilter? filter = _i3.LeaderboardFilter.all,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getUserRankContext, [], {
              #userId: userId,
              #contextSize: contextSize,
              #filter: filter,
            }),
            returnValue:
                _i8.Future<_i4.DatabaseResult<_i3.LeaderboardPage>>.value(
                  _FakeDatabaseResult_2<_i3.LeaderboardPage>(
                    this,
                    Invocation.method(#getUserRankContext, [], {
                      #userId: userId,
                      #contextSize: contextSize,
                      #filter: filter,
                    }),
                  ),
                ),
          )
          as _i8.Future<_i4.DatabaseResult<_i3.LeaderboardPage>>);

  @override
  _i8.Future<_i4.DatabaseResult<List<_i3.LeaderboardEntry>>> getTopUsers({
    int? limit = 10,
    String? currentUserId,
    _i3.LeaderboardFilter? filter = _i3.LeaderboardFilter.all,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getTopUsers, [], {
              #limit: limit,
              #currentUserId: currentUserId,
              #filter: filter,
            }),
            returnValue:
                _i8.Future<
                  _i4.DatabaseResult<List<_i3.LeaderboardEntry>>
                >.value(
                  _FakeDatabaseResult_2<List<_i3.LeaderboardEntry>>(
                    this,
                    Invocation.method(#getTopUsers, [], {
                      #limit: limit,
                      #currentUserId: currentUserId,
                      #filter: filter,
                    }),
                  ),
                ),
          )
          as _i8.Future<_i4.DatabaseResult<List<_i3.LeaderboardEntry>>>);

  @override
  _i8.Future<_i4.DatabaseResult<int>> getUserRank(
    String? userId, {
    _i3.LeaderboardFilter? filter = _i3.LeaderboardFilter.all,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getUserRank, [userId], {#filter: filter}),
            returnValue: _i8.Future<_i4.DatabaseResult<int>>.value(
              _FakeDatabaseResult_2<int>(
                this,
                Invocation.method(#getUserRank, [userId], {#filter: filter}),
              ),
            ),
          )
          as _i8.Future<_i4.DatabaseResult<int>>);

  @override
  _i8.Future<_i4.DatabaseResult<List<_i3.LeaderboardEntry>>> searchUsers({
    required String? query,
    int? limit = 20,
    String? currentUserId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#searchUsers, [], {
              #query: query,
              #limit: limit,
              #currentUserId: currentUserId,
            }),
            returnValue:
                _i8.Future<
                  _i4.DatabaseResult<List<_i3.LeaderboardEntry>>
                >.value(
                  _FakeDatabaseResult_2<List<_i3.LeaderboardEntry>>(
                    this,
                    Invocation.method(#searchUsers, [], {
                      #query: query,
                      #limit: limit,
                      #currentUserId: currentUserId,
                    }),
                  ),
                ),
          )
          as _i8.Future<_i4.DatabaseResult<List<_i3.LeaderboardEntry>>>);

  @override
  _i8.Stream<List<_i3.LeaderboardEntry>> subscribeToLeaderboard({
    int? limit = 20,
    String? currentUserId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#subscribeToLeaderboard, [], {
              #limit: limit,
              #currentUserId: currentUserId,
            }),
            returnValue: _i8.Stream<List<_i3.LeaderboardEntry>>.empty(),
          )
          as _i8.Stream<List<_i3.LeaderboardEntry>>);

  @override
  _i8.Stream<int?> subscribeToUserRank(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#subscribeToUserRank, [userId]),
            returnValue: _i8.Stream<int?>.empty(),
          )
          as _i8.Stream<int?>);

  @override
  _i8.Future<_i4.DatabaseResult<Map<String, dynamic>>> getLeaderboardStats() =>
      (super.noSuchMethod(
            Invocation.method(#getLeaderboardStats, []),
            returnValue:
                _i8.Future<_i4.DatabaseResult<Map<String, dynamic>>>.value(
                  _FakeDatabaseResult_2<Map<String, dynamic>>(
                    this,
                    Invocation.method(#getLeaderboardStats, []),
                  ),
                ),
          )
          as _i8.Future<_i4.DatabaseResult<Map<String, dynamic>>>);

  @override
  _i8.Future<_i4.DatabaseResult<void>> refreshLeaderboard() =>
      (super.noSuchMethod(
            Invocation.method(#refreshLeaderboard, []),
            returnValue: _i8.Future<_i4.DatabaseResult<void>>.value(
              _FakeDatabaseResult_2<void>(
                this,
                Invocation.method(#refreshLeaderboard, []),
              ),
            ),
          )
          as _i8.Future<_i4.DatabaseResult<void>>);

  @override
  _i8.Future<_i4.DatabaseResult<_i3.LeaderboardEntry?>> findById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#findById, [id]),
            returnValue:
                _i8.Future<_i4.DatabaseResult<_i3.LeaderboardEntry?>>.value(
                  _FakeDatabaseResult_2<_i3.LeaderboardEntry?>(
                    this,
                    Invocation.method(#findById, [id]),
                  ),
                ),
          )
          as _i8.Future<_i4.DatabaseResult<_i3.LeaderboardEntry?>>);

  @override
  _i8.Future<_i4.DatabaseResult<List<_i3.LeaderboardEntry>>> findByUserId(
    String? userId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#findByUserId, [userId]),
            returnValue:
                _i8.Future<
                  _i4.DatabaseResult<List<_i3.LeaderboardEntry>>
                >.value(
                  _FakeDatabaseResult_2<List<_i3.LeaderboardEntry>>(
                    this,
                    Invocation.method(#findByUserId, [userId]),
                  ),
                ),
          )
          as _i8.Future<_i4.DatabaseResult<List<_i3.LeaderboardEntry>>>);

  @override
  _i8.Future<_i4.DatabaseResult<List<_i3.LeaderboardEntry>>> findAll({
    int? limit,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#findAll, [], {#limit: limit}),
            returnValue:
                _i8.Future<
                  _i4.DatabaseResult<List<_i3.LeaderboardEntry>>
                >.value(
                  _FakeDatabaseResult_2<List<_i3.LeaderboardEntry>>(
                    this,
                    Invocation.method(#findAll, [], {#limit: limit}),
                  ),
                ),
          )
          as _i8.Future<_i4.DatabaseResult<List<_i3.LeaderboardEntry>>>);

  @override
  _i8.Future<_i4.DatabaseResult<_i3.LeaderboardEntry>> create(
    _i3.LeaderboardEntry? entity,
    String? userId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#create, [entity, userId]),
            returnValue:
                _i8.Future<_i4.DatabaseResult<_i3.LeaderboardEntry>>.value(
                  _FakeDatabaseResult_2<_i3.LeaderboardEntry>(
                    this,
                    Invocation.method(#create, [entity, userId]),
                  ),
                ),
          )
          as _i8.Future<_i4.DatabaseResult<_i3.LeaderboardEntry>>);

  @override
  _i8.Future<_i4.DatabaseResult<_i3.LeaderboardEntry>> update(
    String? id,
    _i3.LeaderboardEntry? entity,
    String? userId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#update, [id, entity, userId]),
            returnValue:
                _i8.Future<_i4.DatabaseResult<_i3.LeaderboardEntry>>.value(
                  _FakeDatabaseResult_2<_i3.LeaderboardEntry>(
                    this,
                    Invocation.method(#update, [id, entity, userId]),
                  ),
                ),
          )
          as _i8.Future<_i4.DatabaseResult<_i3.LeaderboardEntry>>);

  @override
  _i8.Future<_i4.DatabaseResult<void>> delete(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [id]),
            returnValue: _i8.Future<_i4.DatabaseResult<void>>.value(
              _FakeDatabaseResult_2<void>(
                this,
                Invocation.method(#delete, [id]),
              ),
            ),
          )
          as _i8.Future<_i4.DatabaseResult<void>>);

  @override
  _i8.Future<_i4.DatabaseResult<void>> deleteByUserId(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteByUserId, [userId]),
            returnValue: _i8.Future<_i4.DatabaseResult<void>>.value(
              _FakeDatabaseResult_2<void>(
                this,
                Invocation.method(#deleteByUserId, [userId]),
              ),
            ),
          )
          as _i8.Future<_i4.DatabaseResult<void>>);

  @override
  _i8.Future<_i4.DatabaseResult<List<_i3.LeaderboardEntry>>> createBatch(
    List<_i3.LeaderboardEntry>? entities,
    String? userId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createBatch, [entities, userId]),
            returnValue:
                _i8.Future<
                  _i4.DatabaseResult<List<_i3.LeaderboardEntry>>
                >.value(
                  _FakeDatabaseResult_2<List<_i3.LeaderboardEntry>>(
                    this,
                    Invocation.method(#createBatch, [entities, userId]),
                  ),
                ),
          )
          as _i8.Future<_i4.DatabaseResult<List<_i3.LeaderboardEntry>>>);

  @override
  _i8.Future<_i4.DatabaseResult<List<_i3.LeaderboardEntry>>> updateBatch(
    Map<String, _i3.LeaderboardEntry>? entitiesById,
    String? userId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateBatch, [entitiesById, userId]),
            returnValue:
                _i8.Future<
                  _i4.DatabaseResult<List<_i3.LeaderboardEntry>>
                >.value(
                  _FakeDatabaseResult_2<List<_i3.LeaderboardEntry>>(
                    this,
                    Invocation.method(#updateBatch, [entitiesById, userId]),
                  ),
                ),
          )
          as _i8.Future<_i4.DatabaseResult<List<_i3.LeaderboardEntry>>>);

  @override
  _i8.Future<_i4.DatabaseResult<void>> deleteBatch(List<String>? ids) =>
      (super.noSuchMethod(
            Invocation.method(#deleteBatch, [ids]),
            returnValue: _i8.Future<_i4.DatabaseResult<void>>.value(
              _FakeDatabaseResult_2<void>(
                this,
                Invocation.method(#deleteBatch, [ids]),
              ),
            ),
          )
          as _i8.Future<_i4.DatabaseResult<void>>);

  @override
  _i8.Future<_i4.DatabaseResult<int>> countByUserId(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#countByUserId, [userId]),
            returnValue: _i8.Future<_i4.DatabaseResult<int>>.value(
              _FakeDatabaseResult_2<int>(
                this,
                Invocation.method(#countByUserId, [userId]),
              ),
            ),
          )
          as _i8.Future<_i4.DatabaseResult<int>>);

  @override
  _i8.Future<_i4.DatabaseResult<bool>> existsById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#existsById, [id]),
            returnValue: _i8.Future<_i4.DatabaseResult<bool>>.value(
              _FakeDatabaseResult_2<bool>(
                this,
                Invocation.method(#existsById, [id]),
              ),
            ),
          )
          as _i8.Future<_i4.DatabaseResult<bool>>);

  @override
  _i8.Stream<List<_i3.LeaderboardEntry>> subscribeToUserData(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#subscribeToUserData, [userId]),
            returnValue: _i8.Stream<List<_i3.LeaderboardEntry>>.empty(),
          )
          as _i8.Stream<List<_i3.LeaderboardEntry>>);

  @override
  _i8.Stream<_i3.LeaderboardEntry?> subscribeToEntity(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#subscribeToEntity, [id]),
            returnValue: _i8.Stream<_i3.LeaderboardEntry?>.empty(),
          )
          as _i8.Stream<_i3.LeaderboardEntry?>);

  @override
  _i8.Future<_i4.DatabaseResult<U>> executeWithRetry<U>({
    required String? operation,
    required _i8.Future<_i4.DatabaseResult<U>> Function()? action,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#executeWithRetry, [], {
              #operation: operation,
              #action: action,
            }),
            returnValue: _i8.Future<_i4.DatabaseResult<U>>.value(
              _FakeDatabaseResult_2<U>(
                this,
                Invocation.method(#executeWithRetry, [], {
                  #operation: operation,
                  #action: action,
                }),
              ),
            ),
          )
          as _i8.Future<_i4.DatabaseResult<U>>);

  @override
  _i8.Future<bool> testConnection() =>
      (super.noSuchMethod(
            Invocation.method(#testConnection, []),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<_i4.DatabaseResult<Map<String, dynamic>>> getHealthStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getHealthStatus, []),
            returnValue:
                _i8.Future<_i4.DatabaseResult<Map<String, dynamic>>>.value(
                  _FakeDatabaseResult_2<Map<String, dynamic>>(
                    this,
                    Invocation.method(#getHealthStatus, []),
                  ),
                ),
          )
          as _i8.Future<_i4.DatabaseResult<Map<String, dynamic>>>);
}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i5.UserService {
  MockUserService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Stream<_i9.User?> get userStream =>
      (super.noSuchMethod(
            Invocation.getter(#userStream),
            returnValue: _i8.Stream<_i9.User?>.empty(),
          )
          as _i8.Stream<_i9.User?>);

  @override
  _i8.Stream<bool> get authStateStream =>
      (super.noSuchMethod(
            Invocation.getter(#authStateStream),
            returnValue: _i8.Stream<bool>.empty(),
          )
          as _i8.Stream<bool>);

  @override
  bool get isAuthenticated =>
      (super.noSuchMethod(
            Invocation.getter(#isAuthenticated),
            returnValue: false,
          )
          as bool);

  @override
  _i8.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<_i5.AuthResult> signInWithEmail(String? email, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmail, [email, password]),
            returnValue: _i8.Future<_i5.AuthResult>.value(
              _FakeAuthResult_3(
                this,
                Invocation.method(#signInWithEmail, [email, password]),
              ),
            ),
          )
          as _i8.Future<_i5.AuthResult>);

  @override
  _i8.Future<_i5.AuthResult> signUpWithEmail(
    String? email,
    String? password,
    String? username,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signUpWithEmail, [email, password, username]),
            returnValue: _i8.Future<_i5.AuthResult>.value(
              _FakeAuthResult_3(
                this,
                Invocation.method(#signUpWithEmail, [
                  email,
                  password,
                  username,
                ]),
              ),
            ),
          )
          as _i8.Future<_i5.AuthResult>);

  @override
  _i8.Future<_i5.AuthResult> signInWithGoogle() =>
      (super.noSuchMethod(
            Invocation.method(#signInWithGoogle, []),
            returnValue: _i8.Future<_i5.AuthResult>.value(
              _FakeAuthResult_3(this, Invocation.method(#signInWithGoogle, [])),
            ),
          )
          as _i8.Future<_i5.AuthResult>);

  @override
  _i8.Future<_i5.AuthResult> signInAnonymously() =>
      (super.noSuchMethod(
            Invocation.method(#signInAnonymously, []),
            returnValue: _i8.Future<_i5.AuthResult>.value(
              _FakeAuthResult_3(
                this,
                Invocation.method(#signInAnonymously, []),
              ),
            ),
          )
          as _i8.Future<_i5.AuthResult>);

  @override
  _i8.Future<void> updateUserProfile(_i9.User? updatedUser) =>
      (super.noSuchMethod(
            Invocation.method(#updateUserProfile, [updatedUser]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> updateUserPoints(int? pointsToAdd) =>
      (super.noSuchMethod(
            Invocation.method(#updateUserPoints, [pointsToAdd]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> updateOnlineStatus(bool? isOnline) =>
      (super.noSuchMethod(
            Invocation.method(#updateOnlineStatus, [isOnline]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> initializeWithDemoUser() =>
      (super.noSuchMethod(
            Invocation.method(#initializeWithDemoUser, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> addAchievement(String? achievementId) =>
      (super.noSuchMethod(
            Invocation.method(#addAchievement, [achievementId]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  Map<String, dynamic> getUserStats() =>
      (super.noSuchMethod(
            Invocation.method(#getUserStats, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i8.Future<void> syncUserData() =>
      (super.noSuchMethod(
            Invocation.method(#syncUserData, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<bool> checkEmailVerification() =>
      (super.noSuchMethod(
            Invocation.method(#checkEmailVerification, []),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> resendEmailConfirmation(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#resendEmailConfirmation, [email]),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<_i5.AuthResult> verifyEmailWithToken(
    String? token,
    String? email,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#verifyEmailWithToken, [token, email]),
            returnValue: _i8.Future<_i5.AuthResult>.value(
              _FakeAuthResult_3(
                this,
                Invocation.method(#verifyEmailWithToken, [token, email]),
              ),
            ),
          )
          as _i8.Future<_i5.AuthResult>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i10.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() =>
      (super.noSuchMethod(
            Invocation.method(#getKeys, []),
            returnValue: <String>{},
          )
          as Set<String>);

  @override
  Object? get(String? key) =>
      (super.noSuchMethod(Invocation.method(#get, [key])) as Object?);

  @override
  bool? getBool(String? key) =>
      (super.noSuchMethod(Invocation.method(#getBool, [key])) as bool?);

  @override
  int? getInt(String? key) =>
      (super.noSuchMethod(Invocation.method(#getInt, [key])) as int?);

  @override
  double? getDouble(String? key) =>
      (super.noSuchMethod(Invocation.method(#getDouble, [key])) as double?);

  @override
  String? getString(String? key) =>
      (super.noSuchMethod(Invocation.method(#getString, [key])) as String?);

  @override
  bool containsKey(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#containsKey, [key]),
            returnValue: false,
          )
          as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(#getStringList, [key]))
          as List<String>?);

  @override
  _i8.Future<bool> setBool(String? key, bool? value) =>
      (super.noSuchMethod(
            Invocation.method(#setBool, [key, value]),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> setInt(String? key, int? value) =>
      (super.noSuchMethod(
            Invocation.method(#setInt, [key, value]),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> setDouble(String? key, double? value) =>
      (super.noSuchMethod(
            Invocation.method(#setDouble, [key, value]),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> setString(String? key, String? value) =>
      (super.noSuchMethod(
            Invocation.method(#setString, [key, value]),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> setStringList(String? key, List<String>? value) =>
      (super.noSuchMethod(
            Invocation.method(#setStringList, [key, value]),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> remove(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#remove, [key]),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> commit() =>
      (super.noSuchMethod(
            Invocation.method(#commit, []),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<bool> clear() =>
      (super.noSuchMethod(
            Invocation.method(#clear, []),
            returnValue: _i8.Future<bool>.value(false),
          )
          as _i8.Future<bool>);

  @override
  _i8.Future<void> reload() =>
      (super.noSuchMethod(
            Invocation.method(#reload, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);
}
